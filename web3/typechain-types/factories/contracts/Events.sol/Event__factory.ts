/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Event,
  EventInterface,
} from "../../../contracts/Events.sol/Event";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "productID",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "productDetails",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_productID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    name: "addProduct",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610172806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638b69247914610030575b600080fd5b61004a600480360381019061004591906100c4565b61004c565b005b7f972760811cb65229f6c753dcf5a6e52ca79227301f8a482385c775329c576fc5828260405161007d929190610113565b60405180910390a15050565b600080fd5b6000819050919050565b6100a18161008e565b81146100ac57600080fd5b50565b6000813590506100be81610098565b92915050565b600080604083850312156100db576100da610089565b5b60006100e9858286016100af565b92505060206100fa858286016100af565b9150509250929050565b61010d8161008e565b82525050565b60006040820190506101286000830185610104565b6101356020830184610104565b939250505056fea26469706673582212207f56b42844a9f085e82bbf499d374799ebb8b25f0995fb678e51cad624e708f064736f6c63430008170033";

type EventConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EventConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Event__factory extends ContractFactory {
  constructor(...args: EventConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Event & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Event__factory {
    return super.connect(runner) as Event__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EventInterface {
    return new Interface(_abi) as EventInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Event {
    return new Contract(address, _abi, runner) as unknown as Event;
  }
}
