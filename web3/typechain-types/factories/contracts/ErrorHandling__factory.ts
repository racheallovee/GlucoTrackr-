/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  ErrorHandling,
  ErrorHandlingInterface,
} from "../../contracts/ErrorHandling";

const _abi = [
  {
    inputs: [],
    name: "assertNum",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "example1",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052735b4cba0bdaffb8c8a24ceef4e86af88bc5942255600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600255600460035534801561006f57600080fd5b506102ba8061007f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631ec771e91461003b578063a15dd80314610045575b600080fd5b61004361004f565b005b61004d610121565b005b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461011f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101169061016c565b60405180910390fd5b565b6000600354600254610133919061019d565b905060058114610146576101456101fd565b5b50565b600061015660138361018c565b91506101618261025b565b602082019050919050565b6000602082019050818103600083015261018581610149565b9050919050565b600082825260208201905092915050565b60006101a8826101f3565b91506101b3836101f3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156101e8576101e761022c565b5b828201905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f596f757265206e6f7420746865206f776e65720000000000000000000000000060008201525056fea2646970667358221220a0619b3df75ea2497b176e95e48f9977c13a5dec962fb03ed2c11de33c7e6b2d64736f6c63430008070033";

type ErrorHandlingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorHandlingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ErrorHandling__factory extends ContractFactory {
  constructor(...args: ErrorHandlingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ErrorHandling & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ErrorHandling__factory {
    return super.connect(runner) as ErrorHandling__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorHandlingInterface {
    return new Interface(_abi) as ErrorHandlingInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ErrorHandling {
    return new Contract(address, _abi, runner) as unknown as ErrorHandling;
  }
}
