/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PatientDataManagement {
  export type HealthDataStruct = {
    timestamp: BigNumberish;
    glucoseLevel: BigNumberish;
    medicationHash: BytesLike;
    mealsHash: BytesLike;
    exerciseHash: BytesLike;
  };

  export type HealthDataStructOutput = [
    timestamp: bigint,
    glucoseLevel: bigint,
    medicationHash: string,
    mealsHash: string,
    exerciseHash: string
  ] & {
    timestamp: bigint;
    glucoseLevel: bigint;
    medicationHash: string;
    mealsHash: string;
    exerciseHash: string;
  };
}

export interface PatientDataManagementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deleteHealthData"
      | "getAverageGlucoseLevel"
      | "grantEmergencyAccess"
      | "logHealthData"
      | "revokeEmergencyAccess"
      | "updateAccess"
      | "viewHealthData"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessUpdated"
      | "DataLogged"
      | "EmergencyAccessUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deleteHealthData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAverageGlucoseLevel",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantEmergencyAccess",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "logHealthData",
    values: [BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeEmergencyAccess",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAccess",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "viewHealthData",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "deleteHealthData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAverageGlucoseLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantEmergencyAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logHealthData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeEmergencyAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewHealthData",
    data: BytesLike
  ): Result;
}

export namespace AccessUpdatedEvent {
  export type InputTuple = [
    patient: AddressLike,
    accessor: AddressLike,
    isGranted: boolean
  ];
  export type OutputTuple = [
    patient: string,
    accessor: string,
    isGranted: boolean
  ];
  export interface OutputObject {
    patient: string;
    accessor: string;
    isGranted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataLoggedEvent {
  export type InputTuple = [
    patient: AddressLike,
    timestamp: BigNumberish,
    glucoseLevel: BigNumberish,
    medicationHash: BytesLike,
    mealsHash: BytesLike,
    exerciseHash: BytesLike
  ];
  export type OutputTuple = [
    patient: string,
    timestamp: bigint,
    glucoseLevel: bigint,
    medicationHash: string,
    mealsHash: string,
    exerciseHash: string
  ];
  export interface OutputObject {
    patient: string;
    timestamp: bigint;
    glucoseLevel: bigint;
    medicationHash: string;
    mealsHash: string;
    exerciseHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyAccessUpdatedEvent {
  export type InputTuple = [accessor: AddressLike, isGranted: boolean];
  export type OutputTuple = [accessor: string, isGranted: boolean];
  export interface OutputObject {
    accessor: string;
    isGranted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PatientDataManagement extends BaseContract {
  connect(runner?: ContractRunner | null): PatientDataManagement;
  waitForDeployment(): Promise<this>;

  interface: PatientDataManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deleteHealthData: TypedContractMethod<
    [_index: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAverageGlucoseLevel: TypedContractMethod<
    [_patient: AddressLike, _startTime: BigNumberish, _endTime: BigNumberish],
    [bigint],
    "view"
  >;

  grantEmergencyAccess: TypedContractMethod<
    [_accessor: AddressLike],
    [void],
    "nonpayable"
  >;

  logHealthData: TypedContractMethod<
    [
      _glucoseLevel: BigNumberish,
      _medicationHash: BytesLike,
      _mealsHash: BytesLike,
      _exerciseHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  revokeEmergencyAccess: TypedContractMethod<
    [_accessor: AddressLike],
    [void],
    "nonpayable"
  >;

  updateAccess: TypedContractMethod<
    [_accessor: AddressLike, _isGranted: boolean],
    [void],
    "nonpayable"
  >;

  viewHealthData: TypedContractMethod<
    [_patient: AddressLike],
    [PatientDataManagement.HealthDataStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deleteHealthData"
  ): TypedContractMethod<[_index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAverageGlucoseLevel"
  ): TypedContractMethod<
    [_patient: AddressLike, _startTime: BigNumberish, _endTime: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantEmergencyAccess"
  ): TypedContractMethod<[_accessor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "logHealthData"
  ): TypedContractMethod<
    [
      _glucoseLevel: BigNumberish,
      _medicationHash: BytesLike,
      _mealsHash: BytesLike,
      _exerciseHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeEmergencyAccess"
  ): TypedContractMethod<[_accessor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAccess"
  ): TypedContractMethod<
    [_accessor: AddressLike, _isGranted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "viewHealthData"
  ): TypedContractMethod<
    [_patient: AddressLike],
    [PatientDataManagement.HealthDataStructOutput[]],
    "view"
  >;

  getEvent(
    key: "AccessUpdated"
  ): TypedContractEvent<
    AccessUpdatedEvent.InputTuple,
    AccessUpdatedEvent.OutputTuple,
    AccessUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DataLogged"
  ): TypedContractEvent<
    DataLoggedEvent.InputTuple,
    DataLoggedEvent.OutputTuple,
    DataLoggedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyAccessUpdated"
  ): TypedContractEvent<
    EmergencyAccessUpdatedEvent.InputTuple,
    EmergencyAccessUpdatedEvent.OutputTuple,
    EmergencyAccessUpdatedEvent.OutputObject
  >;

  filters: {
    "AccessUpdated(address,address,bool)": TypedContractEvent<
      AccessUpdatedEvent.InputTuple,
      AccessUpdatedEvent.OutputTuple,
      AccessUpdatedEvent.OutputObject
    >;
    AccessUpdated: TypedContractEvent<
      AccessUpdatedEvent.InputTuple,
      AccessUpdatedEvent.OutputTuple,
      AccessUpdatedEvent.OutputObject
    >;

    "DataLogged(address,uint256,uint256,bytes32,bytes32,bytes32)": TypedContractEvent<
      DataLoggedEvent.InputTuple,
      DataLoggedEvent.OutputTuple,
      DataLoggedEvent.OutputObject
    >;
    DataLogged: TypedContractEvent<
      DataLoggedEvent.InputTuple,
      DataLoggedEvent.OutputTuple,
      DataLoggedEvent.OutputObject
    >;

    "EmergencyAccessUpdated(address,bool)": TypedContractEvent<
      EmergencyAccessUpdatedEvent.InputTuple,
      EmergencyAccessUpdatedEvent.OutputTuple,
      EmergencyAccessUpdatedEvent.OutputObject
    >;
    EmergencyAccessUpdated: TypedContractEvent<
      EmergencyAccessUpdatedEvent.InputTuple,
      EmergencyAccessUpdatedEvent.OutputTuple,
      EmergencyAccessUpdatedEvent.OutputObject
    >;
  };
}
