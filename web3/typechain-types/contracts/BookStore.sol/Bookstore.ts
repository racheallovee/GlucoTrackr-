/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Bookstore {
  export type BookStruct = {
    bookId: BigNumberish;
    title: string;
    author: string;
    price: BigNumberish;
    stock: BigNumberish;
    isAvailable: boolean;
  };

  export type BookStructOutput = [
    bookId: bigint,
    title: string,
    author: string,
    price: bigint,
    stock: bigint,
    isAvailable: boolean
  ] & {
    bookId: bigint;
    title: string;
    author: string;
    price: bigint;
    stock: bigint;
    isAvailable: boolean;
  };
}

export interface BookstoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addBook"
      | "bookCount"
      | "books"
      | "getAllBooks"
      | "getBookDetails"
      | "getOwnerBalance"
      | "owner"
      | "purchaseBook"
      | "removeAllBooks"
      | "removeBook"
      | "totalBooksSold"
      | "updateStock"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addBook",
    values: [BigNumberish, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bookCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "books", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getAllBooks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBookDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseBook",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllBooks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeBook",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBooksSold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateStock",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addBook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bookCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "books", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllBooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBookDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllBooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeBook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBooksSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStock",
    data: BytesLike
  ): Result;
}

export interface Bookstore extends BaseContract {
  connect(runner?: ContractRunner | null): Bookstore;
  waitForDeployment(): Promise<this>;

  interface: BookstoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addBook: TypedContractMethod<
    [
      _bookId: BigNumberish,
      _title: string,
      _author: string,
      _price: BigNumberish,
      _stock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  bookCount: TypedContractMethod<[], [bigint], "view">;

  books: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, boolean] & {
        bookId: bigint;
        title: string;
        author: string;
        price: bigint;
        stock: bigint;
        isAvailable: boolean;
      }
    ],
    "view"
  >;

  getAllBooks: TypedContractMethod<[], [Bookstore.BookStructOutput[]], "view">;

  getBookDetails: TypedContractMethod<
    [_bookId: BigNumberish],
    [[bigint, string, string, bigint, bigint, boolean]],
    "view"
  >;

  getOwnerBalance: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  purchaseBook: TypedContractMethod<
    [_bookId: BigNumberish, _quantity: BigNumberish],
    [void],
    "payable"
  >;

  removeAllBooks: TypedContractMethod<[], [void], "nonpayable">;

  removeBook: TypedContractMethod<
    [_bookId: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalBooksSold: TypedContractMethod<[], [bigint], "view">;

  updateStock: TypedContractMethod<
    [_bookId: BigNumberish, _newStock: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addBook"
  ): TypedContractMethod<
    [
      _bookId: BigNumberish,
      _title: string,
      _author: string,
      _price: BigNumberish,
      _stock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bookCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "books"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, boolean] & {
        bookId: bigint;
        title: string;
        author: string;
        price: bigint;
        stock: bigint;
        isAvailable: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllBooks"
  ): TypedContractMethod<[], [Bookstore.BookStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getBookDetails"
  ): TypedContractMethod<
    [_bookId: BigNumberish],
    [[bigint, string, string, bigint, bigint, boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwnerBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "purchaseBook"
  ): TypedContractMethod<
    [_bookId: BigNumberish, _quantity: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "removeAllBooks"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeBook"
  ): TypedContractMethod<[_bookId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalBooksSold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateStock"
  ): TypedContractMethod<
    [_bookId: BigNumberish, _newStock: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
