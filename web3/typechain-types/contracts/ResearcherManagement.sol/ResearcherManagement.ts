/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ResearcherManagementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "patientDataContract"
      | "registerResearcher"
      | "registeredResearchers"
      | "requestAccess"
      | "researchers"
      | "revokeAccess"
      | "verifyResearcher"
      | "viewAnonymizedData"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessGranted"
      | "AccessRevoked"
      | "ResearcherRegistered"
      | "ResearcherVerified"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "patientDataContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerResearcher",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredResearchers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestAccess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "researchers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAccess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyResearcher",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "viewAnonymizedData",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "patientDataContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerResearcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredResearchers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "researchers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyResearcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewAnonymizedData",
    data: BytesLike
  ): Result;
}

export namespace AccessGrantedEvent {
  export type InputTuple = [researcher: AddressLike];
  export type OutputTuple = [researcher: string];
  export interface OutputObject {
    researcher: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccessRevokedEvent {
  export type InputTuple = [researcher: AddressLike];
  export type OutputTuple = [researcher: string];
  export interface OutputObject {
    researcher: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResearcherRegisteredEvent {
  export type InputTuple = [
    researcher: AddressLike,
    name: string,
    institution: string
  ];
  export type OutputTuple = [
    researcher: string,
    name: string,
    institution: string
  ];
  export interface OutputObject {
    researcher: string;
    name: string;
    institution: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResearcherVerifiedEvent {
  export type InputTuple = [researcher: AddressLike];
  export type OutputTuple = [researcher: string];
  export interface OutputObject {
    researcher: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ResearcherManagement extends BaseContract {
  connect(runner?: ContractRunner | null): ResearcherManagement;
  waitForDeployment(): Promise<this>;

  interface: ResearcherManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  patientDataContract: TypedContractMethod<[], [string], "view">;

  registerResearcher: TypedContractMethod<
    [_name: string, _institution: string],
    [void],
    "nonpayable"
  >;

  registeredResearchers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  requestAccess: TypedContractMethod<[], [void], "nonpayable">;

  researchers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean] & {
        name: string;
        institution: string;
        isVerified: boolean;
      }
    ],
    "view"
  >;

  revokeAccess: TypedContractMethod<[], [void], "nonpayable">;

  verifyResearcher: TypedContractMethod<
    [_researcher: AddressLike],
    [void],
    "nonpayable"
  >;

  viewAnonymizedData: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "patientDataContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerResearcher"
  ): TypedContractMethod<
    [_name: string, _institution: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registeredResearchers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "requestAccess"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "researchers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean] & {
        name: string;
        institution: string;
        isVerified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeAccess"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyResearcher"
  ): TypedContractMethod<[_researcher: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "viewAnonymizedData"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AccessGranted"
  ): TypedContractEvent<
    AccessGrantedEvent.InputTuple,
    AccessGrantedEvent.OutputTuple,
    AccessGrantedEvent.OutputObject
  >;
  getEvent(
    key: "AccessRevoked"
  ): TypedContractEvent<
    AccessRevokedEvent.InputTuple,
    AccessRevokedEvent.OutputTuple,
    AccessRevokedEvent.OutputObject
  >;
  getEvent(
    key: "ResearcherRegistered"
  ): TypedContractEvent<
    ResearcherRegisteredEvent.InputTuple,
    ResearcherRegisteredEvent.OutputTuple,
    ResearcherRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ResearcherVerified"
  ): TypedContractEvent<
    ResearcherVerifiedEvent.InputTuple,
    ResearcherVerifiedEvent.OutputTuple,
    ResearcherVerifiedEvent.OutputObject
  >;

  filters: {
    "AccessGranted(address)": TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;
    AccessGranted: TypedContractEvent<
      AccessGrantedEvent.InputTuple,
      AccessGrantedEvent.OutputTuple,
      AccessGrantedEvent.OutputObject
    >;

    "AccessRevoked(address)": TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;
    AccessRevoked: TypedContractEvent<
      AccessRevokedEvent.InputTuple,
      AccessRevokedEvent.OutputTuple,
      AccessRevokedEvent.OutputObject
    >;

    "ResearcherRegistered(address,string,string)": TypedContractEvent<
      ResearcherRegisteredEvent.InputTuple,
      ResearcherRegisteredEvent.OutputTuple,
      ResearcherRegisteredEvent.OutputObject
    >;
    ResearcherRegistered: TypedContractEvent<
      ResearcherRegisteredEvent.InputTuple,
      ResearcherRegisteredEvent.OutputTuple,
      ResearcherRegisteredEvent.OutputObject
    >;

    "ResearcherVerified(address)": TypedContractEvent<
      ResearcherVerifiedEvent.InputTuple,
      ResearcherVerifiedEvent.OutputTuple,
      ResearcherVerifiedEvent.OutputObject
    >;
    ResearcherVerified: TypedContractEvent<
      ResearcherVerifiedEvent.InputTuple,
      ResearcherVerifiedEvent.OutputTuple,
      ResearcherVerifiedEvent.OutputObject
    >;
  };
}
